// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package rest_api

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.APIKeySource, b.ko.Spec.APIKeySource) {
		delta.Add("Spec.APIKeySource", a.ko.Spec.APIKeySource, b.ko.Spec.APIKeySource)
	} else if a.ko.Spec.APIKeySource != nil && b.ko.Spec.APIKeySource != nil {
		if *a.ko.Spec.APIKeySource != *b.ko.Spec.APIKeySource {
			delta.Add("Spec.APIKeySource", a.ko.Spec.APIKeySource, b.ko.Spec.APIKeySource)
		}
	}
	if len(a.ko.Spec.BinaryMediaTypes) != len(b.ko.Spec.BinaryMediaTypes) {
		delta.Add("Spec.BinaryMediaTypes", a.ko.Spec.BinaryMediaTypes, b.ko.Spec.BinaryMediaTypes)
	} else if len(a.ko.Spec.BinaryMediaTypes) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.BinaryMediaTypes, b.ko.Spec.BinaryMediaTypes) {
			delta.Add("Spec.BinaryMediaTypes", a.ko.Spec.BinaryMediaTypes, b.ko.Spec.BinaryMediaTypes)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.CloneFrom, b.ko.Spec.CloneFrom) {
		delta.Add("Spec.CloneFrom", a.ko.Spec.CloneFrom, b.ko.Spec.CloneFrom)
	} else if a.ko.Spec.CloneFrom != nil && b.ko.Spec.CloneFrom != nil {
		if *a.ko.Spec.CloneFrom != *b.ko.Spec.CloneFrom {
			delta.Add("Spec.CloneFrom", a.ko.Spec.CloneFrom, b.ko.Spec.CloneFrom)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DisableExecuteAPIEndpoint, b.ko.Spec.DisableExecuteAPIEndpoint) {
		delta.Add("Spec.DisableExecuteAPIEndpoint", a.ko.Spec.DisableExecuteAPIEndpoint, b.ko.Spec.DisableExecuteAPIEndpoint)
	} else if a.ko.Spec.DisableExecuteAPIEndpoint != nil && b.ko.Spec.DisableExecuteAPIEndpoint != nil {
		if *a.ko.Spec.DisableExecuteAPIEndpoint != *b.ko.Spec.DisableExecuteAPIEndpoint {
			delta.Add("Spec.DisableExecuteAPIEndpoint", a.ko.Spec.DisableExecuteAPIEndpoint, b.ko.Spec.DisableExecuteAPIEndpoint)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EndpointConfiguration, b.ko.Spec.EndpointConfiguration) {
		delta.Add("Spec.EndpointConfiguration", a.ko.Spec.EndpointConfiguration, b.ko.Spec.EndpointConfiguration)
	} else if a.ko.Spec.EndpointConfiguration != nil && b.ko.Spec.EndpointConfiguration != nil {
		if len(a.ko.Spec.EndpointConfiguration.Types) != len(b.ko.Spec.EndpointConfiguration.Types) {
			delta.Add("Spec.EndpointConfiguration.Types", a.ko.Spec.EndpointConfiguration.Types, b.ko.Spec.EndpointConfiguration.Types)
		} else if len(a.ko.Spec.EndpointConfiguration.Types) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.EndpointConfiguration.Types, b.ko.Spec.EndpointConfiguration.Types) {
				delta.Add("Spec.EndpointConfiguration.Types", a.ko.Spec.EndpointConfiguration.Types, b.ko.Spec.EndpointConfiguration.Types)
			}
		}
		if len(a.ko.Spec.EndpointConfiguration.VPCEndpointIDs) != len(b.ko.Spec.EndpointConfiguration.VPCEndpointIDs) {
			delta.Add("Spec.EndpointConfiguration.VPCEndpointIDs", a.ko.Spec.EndpointConfiguration.VPCEndpointIDs, b.ko.Spec.EndpointConfiguration.VPCEndpointIDs)
		} else if len(a.ko.Spec.EndpointConfiguration.VPCEndpointIDs) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.EndpointConfiguration.VPCEndpointIDs, b.ko.Spec.EndpointConfiguration.VPCEndpointIDs) {
				delta.Add("Spec.EndpointConfiguration.VPCEndpointIDs", a.ko.Spec.EndpointConfiguration.VPCEndpointIDs, b.ko.Spec.EndpointConfiguration.VPCEndpointIDs)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MinimumCompressionSize, b.ko.Spec.MinimumCompressionSize) {
		delta.Add("Spec.MinimumCompressionSize", a.ko.Spec.MinimumCompressionSize, b.ko.Spec.MinimumCompressionSize)
	} else if a.ko.Spec.MinimumCompressionSize != nil && b.ko.Spec.MinimumCompressionSize != nil {
		if *a.ko.Spec.MinimumCompressionSize != *b.ko.Spec.MinimumCompressionSize {
			delta.Add("Spec.MinimumCompressionSize", a.ko.Spec.MinimumCompressionSize, b.ko.Spec.MinimumCompressionSize)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Policy, b.ko.Spec.Policy) {
		delta.Add("Spec.Policy", a.ko.Spec.Policy, b.ko.Spec.Policy)
	} else if a.ko.Spec.Policy != nil && b.ko.Spec.Policy != nil {
		if *a.ko.Spec.Policy != *b.ko.Spec.Policy {
			delta.Add("Spec.Policy", a.ko.Spec.Policy, b.ko.Spec.Policy)
		}
	}
	if !ackcompare.MapStringStringEqual(ToACKTags(a.ko.Spec.Tags), ToACKTags(b.ko.Spec.Tags)) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Version, b.ko.Spec.Version) {
		delta.Add("Spec.Version", a.ko.Spec.Version, b.ko.Spec.Version)
	} else if a.ko.Spec.Version != nil && b.ko.Spec.Version != nil {
		if *a.ko.Spec.Version != *b.ko.Spec.Version {
			delta.Add("Spec.Version", a.ko.Spec.Version, b.ko.Spec.Version)
		}
	}

	return delta
}
