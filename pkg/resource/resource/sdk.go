// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package resource

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/apigateway"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/apigateway-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.APIGateway{}
	_ = &svcapitypes.Resource{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.Resource
	resp, err = rm.sdkapi.GetResourceWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetResource", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Id != nil {
		ko.Status.ID = resp.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.ParentId != nil {
		ko.Spec.ParentID = resp.ParentId
	} else {
		ko.Spec.ParentID = nil
	}
	if resp.Path != nil {
		ko.Status.Path = resp.Path
	} else {
		ko.Status.Path = nil
	}
	if resp.PathPart != nil {
		ko.Spec.PathPart = resp.PathPart
	} else {
		ko.Spec.PathPart = nil
	}
	if resp.ResourceMethods != nil {
		f4 := map[string]*svcapitypes.Method{}
		for f4key, f4valiter := range resp.ResourceMethods {
			f4val := &svcapitypes.Method{}
			if f4valiter.ApiKeyRequired != nil {
				f4val.APIKeyRequired = f4valiter.ApiKeyRequired
			}
			if f4valiter.AuthorizationScopes != nil {
				f4valf1 := []*string{}
				for _, f4valf1iter := range f4valiter.AuthorizationScopes {
					var f4valf1elem string
					f4valf1elem = *f4valf1iter
					f4valf1 = append(f4valf1, &f4valf1elem)
				}
				f4val.AuthorizationScopes = f4valf1
			}
			if f4valiter.AuthorizationType != nil {
				f4val.AuthorizationType = f4valiter.AuthorizationType
			}
			if f4valiter.AuthorizerId != nil {
				f4val.AuthorizerID = f4valiter.AuthorizerId
			}
			if f4valiter.HttpMethod != nil {
				f4val.HTTPMethod = f4valiter.HttpMethod
			}
			if f4valiter.MethodIntegration != nil {
				f4valf5 := &svcapitypes.Integration_SDK{}
				if f4valiter.MethodIntegration.CacheKeyParameters != nil {
					f4valf5f0 := []*string{}
					for _, f4valf5f0iter := range f4valiter.MethodIntegration.CacheKeyParameters {
						var f4valf5f0elem string
						f4valf5f0elem = *f4valf5f0iter
						f4valf5f0 = append(f4valf5f0, &f4valf5f0elem)
					}
					f4valf5.CacheKeyParameters = f4valf5f0
				}
				if f4valiter.MethodIntegration.CacheNamespace != nil {
					f4valf5.CacheNamespace = f4valiter.MethodIntegration.CacheNamespace
				}
				if f4valiter.MethodIntegration.ConnectionId != nil {
					f4valf5.ConnectionID = f4valiter.MethodIntegration.ConnectionId
				}
				if f4valiter.MethodIntegration.ConnectionType != nil {
					f4valf5.ConnectionType = f4valiter.MethodIntegration.ConnectionType
				}
				if f4valiter.MethodIntegration.ContentHandling != nil {
					f4valf5.ContentHandling = f4valiter.MethodIntegration.ContentHandling
				}
				if f4valiter.MethodIntegration.Credentials != nil {
					f4valf5.Credentials = f4valiter.MethodIntegration.Credentials
				}
				if f4valiter.MethodIntegration.HttpMethod != nil {
					f4valf5.HTTPMethod = f4valiter.MethodIntegration.HttpMethod
				}
				if f4valiter.MethodIntegration.IntegrationResponses != nil {
					f4valf5f7 := map[string]*svcapitypes.IntegrationResponse{}
					for f4valf5f7key, f4valf5f7valiter := range f4valiter.MethodIntegration.IntegrationResponses {
						f4valf5f7val := &svcapitypes.IntegrationResponse{}
						if f4valf5f7valiter.ContentHandling != nil {
							f4valf5f7val.ContentHandling = f4valf5f7valiter.ContentHandling
						}
						if f4valf5f7valiter.ResponseParameters != nil {
							f4valf5f7valf1 := map[string]*string{}
							for f4valf5f7valf1key, f4valf5f7valf1valiter := range f4valf5f7valiter.ResponseParameters {
								var f4valf5f7valf1val string
								f4valf5f7valf1val = *f4valf5f7valf1valiter
								f4valf5f7valf1[f4valf5f7valf1key] = &f4valf5f7valf1val
							}
							f4valf5f7val.ResponseParameters = f4valf5f7valf1
						}
						if f4valf5f7valiter.ResponseTemplates != nil {
							f4valf5f7valf2 := map[string]*string{}
							for f4valf5f7valf2key, f4valf5f7valf2valiter := range f4valf5f7valiter.ResponseTemplates {
								var f4valf5f7valf2val string
								f4valf5f7valf2val = *f4valf5f7valf2valiter
								f4valf5f7valf2[f4valf5f7valf2key] = &f4valf5f7valf2val
							}
							f4valf5f7val.ResponseTemplates = f4valf5f7valf2
						}
						if f4valf5f7valiter.SelectionPattern != nil {
							f4valf5f7val.SelectionPattern = f4valf5f7valiter.SelectionPattern
						}
						if f4valf5f7valiter.StatusCode != nil {
							f4valf5f7val.StatusCode = f4valf5f7valiter.StatusCode
						}
						f4valf5f7[f4valf5f7key] = f4valf5f7val
					}
					f4valf5.IntegrationResponses = f4valf5f7
				}
				if f4valiter.MethodIntegration.PassthroughBehavior != nil {
					f4valf5.PassthroughBehavior = f4valiter.MethodIntegration.PassthroughBehavior
				}
				if f4valiter.MethodIntegration.RequestParameters != nil {
					f4valf5f9 := map[string]*string{}
					for f4valf5f9key, f4valf5f9valiter := range f4valiter.MethodIntegration.RequestParameters {
						var f4valf5f9val string
						f4valf5f9val = *f4valf5f9valiter
						f4valf5f9[f4valf5f9key] = &f4valf5f9val
					}
					f4valf5.RequestParameters = f4valf5f9
				}
				if f4valiter.MethodIntegration.RequestTemplates != nil {
					f4valf5f10 := map[string]*string{}
					for f4valf5f10key, f4valf5f10valiter := range f4valiter.MethodIntegration.RequestTemplates {
						var f4valf5f10val string
						f4valf5f10val = *f4valf5f10valiter
						f4valf5f10[f4valf5f10key] = &f4valf5f10val
					}
					f4valf5.RequestTemplates = f4valf5f10
				}
				if f4valiter.MethodIntegration.TimeoutInMillis != nil {
					f4valf5.TimeoutInMillis = f4valiter.MethodIntegration.TimeoutInMillis
				}
				if f4valiter.MethodIntegration.TlsConfig != nil {
					f4valf5f12 := &svcapitypes.TLSConfig{}
					if f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification != nil {
						f4valf5f12.InsecureSkipVerification = f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification
					}
					f4valf5.TLSConfig = f4valf5f12
				}
				if f4valiter.MethodIntegration.Type != nil {
					f4valf5.Type = f4valiter.MethodIntegration.Type
				}
				if f4valiter.MethodIntegration.Uri != nil {
					f4valf5.URI = f4valiter.MethodIntegration.Uri
				}
				f4val.MethodIntegration = f4valf5
			}
			if f4valiter.MethodResponses != nil {
				f4valf6 := map[string]*svcapitypes.MethodResponse{}
				for f4valf6key, f4valf6valiter := range f4valiter.MethodResponses {
					f4valf6val := &svcapitypes.MethodResponse{}
					if f4valf6valiter.ResponseModels != nil {
						f4valf6valf0 := map[string]*string{}
						for f4valf6valf0key, f4valf6valf0valiter := range f4valf6valiter.ResponseModels {
							var f4valf6valf0val string
							f4valf6valf0val = *f4valf6valf0valiter
							f4valf6valf0[f4valf6valf0key] = &f4valf6valf0val
						}
						f4valf6val.ResponseModels = f4valf6valf0
					}
					if f4valf6valiter.ResponseParameters != nil {
						f4valf6valf1 := map[string]*bool{}
						for f4valf6valf1key, f4valf6valf1valiter := range f4valf6valiter.ResponseParameters {
							var f4valf6valf1val bool
							f4valf6valf1val = *f4valf6valf1valiter
							f4valf6valf1[f4valf6valf1key] = &f4valf6valf1val
						}
						f4valf6val.ResponseParameters = f4valf6valf1
					}
					if f4valf6valiter.StatusCode != nil {
						f4valf6val.StatusCode = f4valf6valiter.StatusCode
					}
					f4valf6[f4valf6key] = f4valf6val
				}
				f4val.MethodResponses = f4valf6
			}
			if f4valiter.OperationName != nil {
				f4val.OperationName = f4valiter.OperationName
			}
			if f4valiter.RequestModels != nil {
				f4valf8 := map[string]*string{}
				for f4valf8key, f4valf8valiter := range f4valiter.RequestModels {
					var f4valf8val string
					f4valf8val = *f4valf8valiter
					f4valf8[f4valf8key] = &f4valf8val
				}
				f4val.RequestModels = f4valf8
			}
			if f4valiter.RequestParameters != nil {
				f4valf9 := map[string]*bool{}
				for f4valf9key, f4valf9valiter := range f4valiter.RequestParameters {
					var f4valf9val bool
					f4valf9val = *f4valf9valiter
					f4valf9[f4valf9key] = &f4valf9val
				}
				f4val.RequestParameters = f4valf9
			}
			if f4valiter.RequestValidatorId != nil {
				f4val.RequestValidatorID = f4valiter.RequestValidatorId
			}
			f4[f4key] = f4val
		}
		ko.Status.ResourceMethods = f4
	} else {
		ko.Status.ResourceMethods = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.RestAPIID == nil || r.ko.Status.ID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetResourceInput, error) {
	res := &svcsdk.GetResourceInput{}

	if r.ko.Status.ID != nil {
		res.SetResourceId(*r.ko.Status.ID)
	}
	if r.ko.Spec.RestAPIID != nil {
		res.SetRestApiId(*r.ko.Spec.RestAPIID)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.Resource
	_ = resp
	resp, err = rm.sdkapi.CreateResourceWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateResource", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Id != nil {
		ko.Status.ID = resp.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.ParentId != nil {
		ko.Spec.ParentID = resp.ParentId
	} else {
		ko.Spec.ParentID = nil
	}
	if resp.Path != nil {
		ko.Status.Path = resp.Path
	} else {
		ko.Status.Path = nil
	}
	if resp.PathPart != nil {
		ko.Spec.PathPart = resp.PathPart
	} else {
		ko.Spec.PathPart = nil
	}
	if resp.ResourceMethods != nil {
		f4 := map[string]*svcapitypes.Method{}
		for f4key, f4valiter := range resp.ResourceMethods {
			f4val := &svcapitypes.Method{}
			if f4valiter.ApiKeyRequired != nil {
				f4val.APIKeyRequired = f4valiter.ApiKeyRequired
			}
			if f4valiter.AuthorizationScopes != nil {
				f4valf1 := []*string{}
				for _, f4valf1iter := range f4valiter.AuthorizationScopes {
					var f4valf1elem string
					f4valf1elem = *f4valf1iter
					f4valf1 = append(f4valf1, &f4valf1elem)
				}
				f4val.AuthorizationScopes = f4valf1
			}
			if f4valiter.AuthorizationType != nil {
				f4val.AuthorizationType = f4valiter.AuthorizationType
			}
			if f4valiter.AuthorizerId != nil {
				f4val.AuthorizerID = f4valiter.AuthorizerId
			}
			if f4valiter.HttpMethod != nil {
				f4val.HTTPMethod = f4valiter.HttpMethod
			}
			if f4valiter.MethodIntegration != nil {
				f4valf5 := &svcapitypes.Integration_SDK{}
				if f4valiter.MethodIntegration.CacheKeyParameters != nil {
					f4valf5f0 := []*string{}
					for _, f4valf5f0iter := range f4valiter.MethodIntegration.CacheKeyParameters {
						var f4valf5f0elem string
						f4valf5f0elem = *f4valf5f0iter
						f4valf5f0 = append(f4valf5f0, &f4valf5f0elem)
					}
					f4valf5.CacheKeyParameters = f4valf5f0
				}
				if f4valiter.MethodIntegration.CacheNamespace != nil {
					f4valf5.CacheNamespace = f4valiter.MethodIntegration.CacheNamespace
				}
				if f4valiter.MethodIntegration.ConnectionId != nil {
					f4valf5.ConnectionID = f4valiter.MethodIntegration.ConnectionId
				}
				if f4valiter.MethodIntegration.ConnectionType != nil {
					f4valf5.ConnectionType = f4valiter.MethodIntegration.ConnectionType
				}
				if f4valiter.MethodIntegration.ContentHandling != nil {
					f4valf5.ContentHandling = f4valiter.MethodIntegration.ContentHandling
				}
				if f4valiter.MethodIntegration.Credentials != nil {
					f4valf5.Credentials = f4valiter.MethodIntegration.Credentials
				}
				if f4valiter.MethodIntegration.HttpMethod != nil {
					f4valf5.HTTPMethod = f4valiter.MethodIntegration.HttpMethod
				}
				if f4valiter.MethodIntegration.IntegrationResponses != nil {
					f4valf5f7 := map[string]*svcapitypes.IntegrationResponse{}
					for f4valf5f7key, f4valf5f7valiter := range f4valiter.MethodIntegration.IntegrationResponses {
						f4valf5f7val := &svcapitypes.IntegrationResponse{}
						if f4valf5f7valiter.ContentHandling != nil {
							f4valf5f7val.ContentHandling = f4valf5f7valiter.ContentHandling
						}
						if f4valf5f7valiter.ResponseParameters != nil {
							f4valf5f7valf1 := map[string]*string{}
							for f4valf5f7valf1key, f4valf5f7valf1valiter := range f4valf5f7valiter.ResponseParameters {
								var f4valf5f7valf1val string
								f4valf5f7valf1val = *f4valf5f7valf1valiter
								f4valf5f7valf1[f4valf5f7valf1key] = &f4valf5f7valf1val
							}
							f4valf5f7val.ResponseParameters = f4valf5f7valf1
						}
						if f4valf5f7valiter.ResponseTemplates != nil {
							f4valf5f7valf2 := map[string]*string{}
							for f4valf5f7valf2key, f4valf5f7valf2valiter := range f4valf5f7valiter.ResponseTemplates {
								var f4valf5f7valf2val string
								f4valf5f7valf2val = *f4valf5f7valf2valiter
								f4valf5f7valf2[f4valf5f7valf2key] = &f4valf5f7valf2val
							}
							f4valf5f7val.ResponseTemplates = f4valf5f7valf2
						}
						if f4valf5f7valiter.SelectionPattern != nil {
							f4valf5f7val.SelectionPattern = f4valf5f7valiter.SelectionPattern
						}
						if f4valf5f7valiter.StatusCode != nil {
							f4valf5f7val.StatusCode = f4valf5f7valiter.StatusCode
						}
						f4valf5f7[f4valf5f7key] = f4valf5f7val
					}
					f4valf5.IntegrationResponses = f4valf5f7
				}
				if f4valiter.MethodIntegration.PassthroughBehavior != nil {
					f4valf5.PassthroughBehavior = f4valiter.MethodIntegration.PassthroughBehavior
				}
				if f4valiter.MethodIntegration.RequestParameters != nil {
					f4valf5f9 := map[string]*string{}
					for f4valf5f9key, f4valf5f9valiter := range f4valiter.MethodIntegration.RequestParameters {
						var f4valf5f9val string
						f4valf5f9val = *f4valf5f9valiter
						f4valf5f9[f4valf5f9key] = &f4valf5f9val
					}
					f4valf5.RequestParameters = f4valf5f9
				}
				if f4valiter.MethodIntegration.RequestTemplates != nil {
					f4valf5f10 := map[string]*string{}
					for f4valf5f10key, f4valf5f10valiter := range f4valiter.MethodIntegration.RequestTemplates {
						var f4valf5f10val string
						f4valf5f10val = *f4valf5f10valiter
						f4valf5f10[f4valf5f10key] = &f4valf5f10val
					}
					f4valf5.RequestTemplates = f4valf5f10
				}
				if f4valiter.MethodIntegration.TimeoutInMillis != nil {
					f4valf5.TimeoutInMillis = f4valiter.MethodIntegration.TimeoutInMillis
				}
				if f4valiter.MethodIntegration.TlsConfig != nil {
					f4valf5f12 := &svcapitypes.TLSConfig{}
					if f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification != nil {
						f4valf5f12.InsecureSkipVerification = f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification
					}
					f4valf5.TLSConfig = f4valf5f12
				}
				if f4valiter.MethodIntegration.Type != nil {
					f4valf5.Type = f4valiter.MethodIntegration.Type
				}
				if f4valiter.MethodIntegration.Uri != nil {
					f4valf5.URI = f4valiter.MethodIntegration.Uri
				}
				f4val.MethodIntegration = f4valf5
			}
			if f4valiter.MethodResponses != nil {
				f4valf6 := map[string]*svcapitypes.MethodResponse{}
				for f4valf6key, f4valf6valiter := range f4valiter.MethodResponses {
					f4valf6val := &svcapitypes.MethodResponse{}
					if f4valf6valiter.ResponseModels != nil {
						f4valf6valf0 := map[string]*string{}
						for f4valf6valf0key, f4valf6valf0valiter := range f4valf6valiter.ResponseModels {
							var f4valf6valf0val string
							f4valf6valf0val = *f4valf6valf0valiter
							f4valf6valf0[f4valf6valf0key] = &f4valf6valf0val
						}
						f4valf6val.ResponseModels = f4valf6valf0
					}
					if f4valf6valiter.ResponseParameters != nil {
						f4valf6valf1 := map[string]*bool{}
						for f4valf6valf1key, f4valf6valf1valiter := range f4valf6valiter.ResponseParameters {
							var f4valf6valf1val bool
							f4valf6valf1val = *f4valf6valf1valiter
							f4valf6valf1[f4valf6valf1key] = &f4valf6valf1val
						}
						f4valf6val.ResponseParameters = f4valf6valf1
					}
					if f4valf6valiter.StatusCode != nil {
						f4valf6val.StatusCode = f4valf6valiter.StatusCode
					}
					f4valf6[f4valf6key] = f4valf6val
				}
				f4val.MethodResponses = f4valf6
			}
			if f4valiter.OperationName != nil {
				f4val.OperationName = f4valiter.OperationName
			}
			if f4valiter.RequestModels != nil {
				f4valf8 := map[string]*string{}
				for f4valf8key, f4valf8valiter := range f4valiter.RequestModels {
					var f4valf8val string
					f4valf8val = *f4valf8valiter
					f4valf8[f4valf8key] = &f4valf8val
				}
				f4val.RequestModels = f4valf8
			}
			if f4valiter.RequestParameters != nil {
				f4valf9 := map[string]*bool{}
				for f4valf9key, f4valf9valiter := range f4valiter.RequestParameters {
					var f4valf9val bool
					f4valf9val = *f4valf9valiter
					f4valf9[f4valf9key] = &f4valf9val
				}
				f4val.RequestParameters = f4valf9
			}
			if f4valiter.RequestValidatorId != nil {
				f4val.RequestValidatorID = f4valiter.RequestValidatorId
			}
			f4[f4key] = f4val
		}
		ko.Status.ResourceMethods = f4
	} else {
		ko.Status.ResourceMethods = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateResourceInput, error) {
	res := &svcsdk.CreateResourceInput{}

	if r.ko.Spec.ParentID != nil {
		res.SetParentId(*r.ko.Spec.ParentID)
	}
	if r.ko.Spec.PathPart != nil {
		res.SetPathPart(*r.ko.Spec.PathPart)
	}
	if r.ko.Spec.RestAPIID != nil {
		res.SetRestApiId(*r.ko.Spec.RestAPIID)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.Resource
	_ = resp
	resp, err = rm.sdkapi.UpdateResourceWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateResource", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Id != nil {
		ko.Status.ID = resp.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.ParentId != nil {
		ko.Spec.ParentID = resp.ParentId
	} else {
		ko.Spec.ParentID = nil
	}
	if resp.Path != nil {
		ko.Status.Path = resp.Path
	} else {
		ko.Status.Path = nil
	}
	if resp.PathPart != nil {
		ko.Spec.PathPart = resp.PathPart
	} else {
		ko.Spec.PathPart = nil
	}
	if resp.ResourceMethods != nil {
		f4 := map[string]*svcapitypes.Method{}
		for f4key, f4valiter := range resp.ResourceMethods {
			f4val := &svcapitypes.Method{}
			if f4valiter.ApiKeyRequired != nil {
				f4val.APIKeyRequired = f4valiter.ApiKeyRequired
			}
			if f4valiter.AuthorizationScopes != nil {
				f4valf1 := []*string{}
				for _, f4valf1iter := range f4valiter.AuthorizationScopes {
					var f4valf1elem string
					f4valf1elem = *f4valf1iter
					f4valf1 = append(f4valf1, &f4valf1elem)
				}
				f4val.AuthorizationScopes = f4valf1
			}
			if f4valiter.AuthorizationType != nil {
				f4val.AuthorizationType = f4valiter.AuthorizationType
			}
			if f4valiter.AuthorizerId != nil {
				f4val.AuthorizerID = f4valiter.AuthorizerId
			}
			if f4valiter.HttpMethod != nil {
				f4val.HTTPMethod = f4valiter.HttpMethod
			}
			if f4valiter.MethodIntegration != nil {
				f4valf5 := &svcapitypes.Integration_SDK{}
				if f4valiter.MethodIntegration.CacheKeyParameters != nil {
					f4valf5f0 := []*string{}
					for _, f4valf5f0iter := range f4valiter.MethodIntegration.CacheKeyParameters {
						var f4valf5f0elem string
						f4valf5f0elem = *f4valf5f0iter
						f4valf5f0 = append(f4valf5f0, &f4valf5f0elem)
					}
					f4valf5.CacheKeyParameters = f4valf5f0
				}
				if f4valiter.MethodIntegration.CacheNamespace != nil {
					f4valf5.CacheNamespace = f4valiter.MethodIntegration.CacheNamespace
				}
				if f4valiter.MethodIntegration.ConnectionId != nil {
					f4valf5.ConnectionID = f4valiter.MethodIntegration.ConnectionId
				}
				if f4valiter.MethodIntegration.ConnectionType != nil {
					f4valf5.ConnectionType = f4valiter.MethodIntegration.ConnectionType
				}
				if f4valiter.MethodIntegration.ContentHandling != nil {
					f4valf5.ContentHandling = f4valiter.MethodIntegration.ContentHandling
				}
				if f4valiter.MethodIntegration.Credentials != nil {
					f4valf5.Credentials = f4valiter.MethodIntegration.Credentials
				}
				if f4valiter.MethodIntegration.HttpMethod != nil {
					f4valf5.HTTPMethod = f4valiter.MethodIntegration.HttpMethod
				}
				if f4valiter.MethodIntegration.IntegrationResponses != nil {
					f4valf5f7 := map[string]*svcapitypes.IntegrationResponse{}
					for f4valf5f7key, f4valf5f7valiter := range f4valiter.MethodIntegration.IntegrationResponses {
						f4valf5f7val := &svcapitypes.IntegrationResponse{}
						if f4valf5f7valiter.ContentHandling != nil {
							f4valf5f7val.ContentHandling = f4valf5f7valiter.ContentHandling
						}
						if f4valf5f7valiter.ResponseParameters != nil {
							f4valf5f7valf1 := map[string]*string{}
							for f4valf5f7valf1key, f4valf5f7valf1valiter := range f4valf5f7valiter.ResponseParameters {
								var f4valf5f7valf1val string
								f4valf5f7valf1val = *f4valf5f7valf1valiter
								f4valf5f7valf1[f4valf5f7valf1key] = &f4valf5f7valf1val
							}
							f4valf5f7val.ResponseParameters = f4valf5f7valf1
						}
						if f4valf5f7valiter.ResponseTemplates != nil {
							f4valf5f7valf2 := map[string]*string{}
							for f4valf5f7valf2key, f4valf5f7valf2valiter := range f4valf5f7valiter.ResponseTemplates {
								var f4valf5f7valf2val string
								f4valf5f7valf2val = *f4valf5f7valf2valiter
								f4valf5f7valf2[f4valf5f7valf2key] = &f4valf5f7valf2val
							}
							f4valf5f7val.ResponseTemplates = f4valf5f7valf2
						}
						if f4valf5f7valiter.SelectionPattern != nil {
							f4valf5f7val.SelectionPattern = f4valf5f7valiter.SelectionPattern
						}
						if f4valf5f7valiter.StatusCode != nil {
							f4valf5f7val.StatusCode = f4valf5f7valiter.StatusCode
						}
						f4valf5f7[f4valf5f7key] = f4valf5f7val
					}
					f4valf5.IntegrationResponses = f4valf5f7
				}
				if f4valiter.MethodIntegration.PassthroughBehavior != nil {
					f4valf5.PassthroughBehavior = f4valiter.MethodIntegration.PassthroughBehavior
				}
				if f4valiter.MethodIntegration.RequestParameters != nil {
					f4valf5f9 := map[string]*string{}
					for f4valf5f9key, f4valf5f9valiter := range f4valiter.MethodIntegration.RequestParameters {
						var f4valf5f9val string
						f4valf5f9val = *f4valf5f9valiter
						f4valf5f9[f4valf5f9key] = &f4valf5f9val
					}
					f4valf5.RequestParameters = f4valf5f9
				}
				if f4valiter.MethodIntegration.RequestTemplates != nil {
					f4valf5f10 := map[string]*string{}
					for f4valf5f10key, f4valf5f10valiter := range f4valiter.MethodIntegration.RequestTemplates {
						var f4valf5f10val string
						f4valf5f10val = *f4valf5f10valiter
						f4valf5f10[f4valf5f10key] = &f4valf5f10val
					}
					f4valf5.RequestTemplates = f4valf5f10
				}
				if f4valiter.MethodIntegration.TimeoutInMillis != nil {
					f4valf5.TimeoutInMillis = f4valiter.MethodIntegration.TimeoutInMillis
				}
				if f4valiter.MethodIntegration.TlsConfig != nil {
					f4valf5f12 := &svcapitypes.TLSConfig{}
					if f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification != nil {
						f4valf5f12.InsecureSkipVerification = f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification
					}
					f4valf5.TLSConfig = f4valf5f12
				}
				if f4valiter.MethodIntegration.Type != nil {
					f4valf5.Type = f4valiter.MethodIntegration.Type
				}
				if f4valiter.MethodIntegration.Uri != nil {
					f4valf5.URI = f4valiter.MethodIntegration.Uri
				}
				f4val.MethodIntegration = f4valf5
			}
			if f4valiter.MethodResponses != nil {
				f4valf6 := map[string]*svcapitypes.MethodResponse{}
				for f4valf6key, f4valf6valiter := range f4valiter.MethodResponses {
					f4valf6val := &svcapitypes.MethodResponse{}
					if f4valf6valiter.ResponseModels != nil {
						f4valf6valf0 := map[string]*string{}
						for f4valf6valf0key, f4valf6valf0valiter := range f4valf6valiter.ResponseModels {
							var f4valf6valf0val string
							f4valf6valf0val = *f4valf6valf0valiter
							f4valf6valf0[f4valf6valf0key] = &f4valf6valf0val
						}
						f4valf6val.ResponseModels = f4valf6valf0
					}
					if f4valf6valiter.ResponseParameters != nil {
						f4valf6valf1 := map[string]*bool{}
						for f4valf6valf1key, f4valf6valf1valiter := range f4valf6valiter.ResponseParameters {
							var f4valf6valf1val bool
							f4valf6valf1val = *f4valf6valf1valiter
							f4valf6valf1[f4valf6valf1key] = &f4valf6valf1val
						}
						f4valf6val.ResponseParameters = f4valf6valf1
					}
					if f4valf6valiter.StatusCode != nil {
						f4valf6val.StatusCode = f4valf6valiter.StatusCode
					}
					f4valf6[f4valf6key] = f4valf6val
				}
				f4val.MethodResponses = f4valf6
			}
			if f4valiter.OperationName != nil {
				f4val.OperationName = f4valiter.OperationName
			}
			if f4valiter.RequestModels != nil {
				f4valf8 := map[string]*string{}
				for f4valf8key, f4valf8valiter := range f4valiter.RequestModels {
					var f4valf8val string
					f4valf8val = *f4valf8valiter
					f4valf8[f4valf8key] = &f4valf8val
				}
				f4val.RequestModels = f4valf8
			}
			if f4valiter.RequestParameters != nil {
				f4valf9 := map[string]*bool{}
				for f4valf9key, f4valf9valiter := range f4valiter.RequestParameters {
					var f4valf9val bool
					f4valf9val = *f4valf9valiter
					f4valf9[f4valf9key] = &f4valf9val
				}
				f4val.RequestParameters = f4valf9
			}
			if f4valiter.RequestValidatorId != nil {
				f4val.RequestValidatorID = f4valiter.RequestValidatorId
			}
			f4[f4key] = f4val
		}
		ko.Status.ResourceMethods = f4
	} else {
		ko.Status.ResourceMethods = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateResourceInput, error) {
	res := &svcsdk.UpdateResourceInput{}

	if r.ko.Status.ID != nil {
		res.SetResourceId(*r.ko.Status.ID)
	}
	if r.ko.Spec.RestAPIID != nil {
		res.SetRestApiId(*r.ko.Spec.RestAPIID)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteResourceOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteResourceWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteResource", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteResourceInput, error) {
	res := &svcsdk.DeleteResourceInput{}

	if r.ko.Status.ID != nil {
		res.SetResourceId(*r.ko.Status.ID)
	}
	if r.ko.Spec.RestAPIID != nil {
		res.SetRestApiId(*r.ko.Spec.RestAPIID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Resource,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
