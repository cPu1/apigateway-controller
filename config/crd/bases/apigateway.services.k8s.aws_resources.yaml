---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: resources.apigateway.services.k8s.aws
spec:
  group: apigateway.services.k8s.aws
  names:
    kind: Resource
    listKind: ResourceList
    plural: resources
    singular: resource
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Resource is the Schema for the Resources API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              ResourceSpec defines the desired state of Resource.


              Represents an API resource.
            properties:
              parentID:
                description: The parent resource's identifier.
                type: string
              pathPart:
                description: The last path segment for this resource.
                type: string
              restAPIID:
                description: The string identifier of the associated RestApi.
                type: string
            required:
            - parentID
            - pathPart
            - restAPIID
            type: object
          status:
            description: ResourceStatus defines the observed state of Resource
            properties:
              ackResourceMetadata:
                description: |-
                  All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
                  that is used to contain resource sync state, account ownership,
                  constructed ARN for the resource
                properties:
                  arn:
                    description: |-
                      ARN is the Amazon Resource Name for the resource. This is a
                      globally-unique identifier and is set only by the ACK service controller
                      once the controller has orchestrated the creation of the resource OR
                      when it has verified that an "adopted" resource (a resource where the
                      ARN annotation was set by the Kubernetes user on the CR) exists and
                      matches the supplied CR's Spec field values.
                      TODO(vijat@): Find a better strategy for resources that do not have ARN in CreateOutputResponse
                      https://github.com/aws/aws-controllers-k8s/issues/270
                    type: string
                  ownerAccountID:
                    description: |-
                      OwnerAccountID is the AWS Account ID of the account that owns the
                      backend AWS service API resource.
                    type: string
                  region:
                    description: Region is the AWS region in which the resource exists
                      or will exist.
                    type: string
                required:
                - ownerAccountID
                - region
                type: object
              conditions:
                description: |-
                  All CRS managed by ACK have a common `Status.Conditions` member that
                  contains a collection of `ackv1alpha1.Condition` objects that describe
                  the various terminal states of the CR and its backend AWS service API
                  resource
                items:
                  description: |-
                    Condition is the common struct used by all CRDs managed by ACK service
                    controllers to indicate terminal states  of the CR and its backend AWS
                    service API resource
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the Condition
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              id:
                description: The resource's identifier.
                type: string
              path:
                description: The full path for this resource.
                type: string
              resourceMethods:
                additionalProperties:
                  description: |-
                    Represents a client-facing interface by which the client calls the API to
                    access back-end resources. A Method resource is integrated with an Integration
                    resource. Both consist of a request and one or more responses. The method
                    request takes the client input that is passed to the back end through the
                    integration request. A method response returns the output from the back end
                    to the client through an integration response. A method request is embodied
                    in a Method resource, whereas an integration request is embodied in an Integration
                    resource. On the other hand, a method response is represented by a MethodResponse
                    resource, whereas an integration response is represented by an IntegrationResponse
                    resource.
                  properties:
                    apiKeyRequired:
                      type: boolean
                    authorizationScopes:
                      items:
                        type: string
                      type: array
                    authorizationType:
                      type: string
                    authorizerID:
                      type: string
                    httpMethod:
                      type: string
                    methodIntegration:
                      description: Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY,
                        or Mock integration.
                      properties:
                        cacheKeyParameters:
                          items:
                            type: string
                          type: array
                        cacheNamespace:
                          type: string
                        connectionID:
                          type: string
                        connectionType:
                          type: string
                        contentHandling:
                          type: string
                        credentials:
                          type: string
                        httpMethod:
                          type: string
                        integrationResponses:
                          additionalProperties:
                            description: |-
                              Represents an integration response. The status code must map to an existing
                              MethodResponse, and parameters and templates can be used to transform the
                              back-end response.
                            properties:
                              contentHandling:
                                type: string
                              responseParameters:
                                additionalProperties:
                                  type: string
                                type: object
                              responseTemplates:
                                additionalProperties:
                                  type: string
                                type: object
                              selectionPattern:
                                type: string
                              statusCode:
                                description: The status code.
                                type: string
                            type: object
                          type: object
                        passthroughBehavior:
                          type: string
                        requestParameters:
                          additionalProperties:
                            type: string
                          type: object
                        requestTemplates:
                          additionalProperties:
                            type: string
                          type: object
                        timeoutInMillis:
                          format: int64
                          type: integer
                        tlsConfig:
                          description: Specifies the TLS configuration for an integration.
                          properties:
                            insecureSkipVerification:
                              type: boolean
                          type: object
                        type_:
                          description: |-
                            The integration type. The valid value is HTTP for integrating an API method
                            with an HTTP backend; AWS with any Amazon Web Services service endpoints;
                            MOCK for testing without actually invoking the backend; HTTP_PROXY for integrating
                            with the HTTP proxy integration; AWS_PROXY for integrating with the Lambda
                            proxy integration.
                          type: string
                        uri:
                          type: string
                      type: object
                    methodResponses:
                      additionalProperties:
                        description: |-
                          Represents a method response of a given HTTP status code returned to the
                          client. The method response is passed from the back end through the associated
                          integration response that can be transformed using a mapping template.
                        properties:
                          responseModels:
                            additionalProperties:
                              type: string
                            type: object
                          responseParameters:
                            additionalProperties:
                              type: boolean
                            type: object
                          statusCode:
                            description: The status code.
                            type: string
                        type: object
                      type: object
                    operationName:
                      type: string
                    requestModels:
                      additionalProperties:
                        type: string
                      type: object
                    requestParameters:
                      additionalProperties:
                        type: boolean
                      type: object
                    requestValidatorID:
                      type: string
                  type: object
                description: Gets an API resource's method of a given HTTP verb.
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
